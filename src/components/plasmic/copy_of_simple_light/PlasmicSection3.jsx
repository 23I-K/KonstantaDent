// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rRiHBMbiCNZ6Mp9qsJpkyN
// Component: tf5M08sLxb-jZ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_simple_light.module.css"; // plasmic-import: rRiHBMbiCNZ6Mp9qsJpkyN/projectcss
import * as sty from "./PlasmicSection3.module.css"; // plasmic-import: tf5M08sLxb-jZ/css
import StarsFiledBlacksvgIcon from "./icons/PlasmicIcon__StarsFiledBlacksvg"; // plasmic-import: sdWujhztpnV5A/icon
import Tooth4Greysvg2Icon from "./icons/PlasmicIcon__Tooth4Greysvg2"; // plasmic-import: YjsKtpKjYwdSo/icon
import TeethBlacksvgIcon from "./icons/PlasmicIcon__TeethBlacksvg"; // plasmic-import: JyY3pwK5FCsV4/icon
import equipment1PngJyMe45Dtw75J9 from "./images/equipment1Png.png"; // plasmic-import: jyME45dtw75J9/picture

export const PlasmicSection3__VariantProps = new Array(
  "reverseView",
  "simpleView"
);

export const PlasmicSection3__ArgProps = new Array(
  "techImage",
  "mainTitle",
  "subTitle"
);

function PlasmicSection3__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__reverseView]: hasVariant(
          variants,
          "reverseView",
          "reverseView"
        ),

        [sty.root__simpleView]: hasVariant(variants, "simpleView", "simpleView")
      })}
    >
      {(
        hasVariant(variants, "simpleView", "simpleView")
          ? false
          : hasVariant(variants, "reverseView", "reverseView")
          ? false
          : true
      ) ? (
        <div
          className={classNames(defaultcss.all, sty.box___8W6AS, {
            [sty.box__reverseView___8W6ASiFbw]: hasVariant(
              variants,
              "reverseView",
              "reverseView"
            ),

            [sty.box__simpleView___8W6ASkfrUm]: hasVariant(
              variants,
              "simpleView",
              "simpleView"
            )
          })}
        >
          <div className={classNames(defaultcss.all, sty.box__cwXtl)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__aBc7M
              )}
            >
                Только новейшее и <span style={{color: 'rgb(233, 184, 184)'}}>уникальное</span> оборудование
            </div>

            <StarsFiledBlacksvgIcon
              className={classNames(defaultcss.all, sty.svg__iqLBa)}
              role={"img"}
            />
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box___9L2Gz
            )}
          >
            {
              "В нашей клинике мы используем высокотехнологичное оборудование, которое позволяет нам добиваться максимальной четкости при диагностический аппарат, благодаря которому наши врачи безболезненно проводят полное исследование челюстной зоны диагностике и эффективности во время лечения"
            }
          </div>
        </div>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box___0GHcx, {
          [sty.box__reverseView___0GHcxiFbw]: hasVariant(
            variants,
            "reverseView",
            "reverseView"
          ),

          [sty.box__simpleView___0GHcXkfrUm]: hasVariant(
            variants,
            "simpleView",
            "simpleView"
          )
        })}
      >
        <p.PlasmicSlot
          defaultContents={
            <img
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(defaultcss.img, sty.img)}
              role={"img"}
              src={equipment1PngJyMe45Dtw75J9}
            />
          }
          value={args.techImage}
        />

        <p.Stack
          as={"div"}
          hasGap={
            hasVariant(variants, "reverseView", "reverseView") ? true : false
          }
          className={classNames(defaultcss.all, sty.box__cZjRw, {
            [sty.box__reverseView__cZjRwIFbw]: hasVariant(
              variants,
              "reverseView",
              "reverseView"
            )
          })}
        >
          <p.PlasmicSlot
            defaultContents={"3D Ортопантомограф "}
            value={args.mainTitle}
            className={classNames(sty.slotMainTitle, {
              [sty.slotMainTitle__reverseView]: hasVariant(
                variants,
                "reverseView",
                "reverseView"
              )
            })}
          />

          <p.PlasmicSlot
            defaultContents={
              "Lиагностический аппарат, благодаря которому наши врачи безболезненно проводят полное исследование челюстной зоны"
            }
            value={args.subTitle}
            className={classNames(sty.slotSubTitle, {
              [sty.slotSubTitle__reverseView]: hasVariant(
                variants,
                "reverseView",
                "reverseView"
              )
            })}
          />
        </p.Stack>
      </p.Stack>

      {(hasVariant(variants, "reverseView", "reverseView") ? true : false) ? (
        <Tooth4Greysvg2Icon
          className={classNames(defaultcss.all, sty.svg__uqLfA, {
            [sty.svg__reverseView__uqLfAiFbw]: hasVariant(
              variants,
              "reverseView",
              "reverseView"
            )
          })}
          role={"img"}
        />
      ) : null}
      {(hasVariant(variants, "simpleView", "simpleView") ? true : false) ? (
        <TeethBlacksvgIcon
          className={classNames(defaultcss.all, sty.svg___326Lt, {
            [sty.svg__simpleView___326LtkfrUm]: hasVariant(
              variants,
              "simpleView",
              "simpleView"
            )
          })}
          role={"img"}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSection3__ArgProps,
      internalVariantPropNames: PlasmicSection3__VariantProps
    });

    return PlasmicSection3__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSection3";
  } else {
    func.displayName = `PlasmicSection3.${nodeName}`;
  }
  return func;
}

export const PlasmicSection3 = Object.assign(
  // Top-level PlasmicSection3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicSection3
    internalVariantProps: PlasmicSection3__VariantProps,
    internalArgProps: PlasmicSection3__ArgProps
  }
);

export default PlasmicSection3;
/* prettier-ignore-end */
