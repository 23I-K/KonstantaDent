// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rRiHBMbiCNZ6Mp9qsJpkyN
// Component: cr8qTWYzmiKt
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ds0rkJllqclQf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_simple_light.module.css"; // plasmic-import: rRiHBMbiCNZ6Mp9qsJpkyN/projectcss
import * as sty from "./PlasmicSection.module.css"; // plasmic-import: cr8qTWYzmiKt/css
import PlaceholdersvgIcon from "./icons/PlasmicIcon__Placeholdersvg"; // plasmic-import: efbLTS6Zlx6ef/icon
import shiningBlackpngK2EelegbbUHdg from "./images/shiningBlackpng.png"; // plasmic-import: k2EelegbbUHdg/picture
import doctorWritingpngLPqVlg3TLjeZk from "./images/doctorWritingpng.png"; // plasmic-import: lPQVlg3TLjeZk/picture
import tooth4Greysvg2PJXvWkEr4Ml from "./images/tooth4Greysvg.svg"; // plasmic-import: 2pJXvWkEr4_ML/picture

export const PlasmicSection__VariantProps = new Array();

export const PlasmicSection__ArgProps = new Array("title", "subtitleMain");

function PlasmicSection__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__m5GWm)}
      >
        <p.PlasmicSlot
          defaultContents={
            "Trusted by over 20,000 companies all over the world"
          }
          value={args.title}
          className={classNames(sty.slotTitle)}
        />

        <p.PlasmicSlot
          defaultContents={"Enter some text"}
          value={args.subtitleMain}
          className={classNames(sty.slotSubtitleMain)}
        />

        {(
          hasVariant(globalVariants, "screen", "mobile")
            ? true
            : hasVariant(globalVariants, "screen", "smallDesktop")
            ? true
            : false
        ) ? (
          <p.Stack
            as={"div"}
            hasGap={
              hasVariant(globalVariants, "screen", "smallDesktop")
                ? true
                : false
            }
            className={classNames(defaultcss.all, sty.box__doCWg)}
          >
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? true
                : hasVariant(globalVariants, "screen", "smallDesktop")
                ? true
                : false
            ) ? (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__gKpHx
                )}
              >
                {
                  "Я приветствую Вас в моей клинике Константа Дентал. Кратко расскажу Вам о нас."
                }
              </div>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobile")
                ? false
                : hasVariant(globalVariants, "screen", "smallDesktop")
                ? true
                : false
            ) ? (
              <img
                alt={""}
                className={classNames(defaultcss.img, sty.img__fUs38)}
                role={"img"}
                src={shiningBlackpngK2EelegbbUHdg}
              />
            ) : null}
          </p.Stack>
        ) : null}
        {(
          hasVariant(globalVariants, "screen", "mobile")
            ? false
            : hasVariant(globalVariants, "screen", "smallDesktop")
            ? false
            : true
        ) ? (
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__ljL3C
            )}
          >
            {
              "Я приветствую Вас в моей клинике Константа Дентал. Кратко расскажу Вам о нас."
            }
          </div>
        ) : null}
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={
          hasVariant(globalVariants, "screen", "smallDesktop") ||
          hasVariant(globalVariants, "screen", "mobile")
            ? true
            : false
        }
        className={classNames(defaultcss.all, sty.box__tat6M)}
      >
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__iJk8)}
          role={"img"}
          src={doctorWritingpngLPqVlg3TLjeZk}
        />

        <p.Stack
          as={"ul"}
          data-plasmic-name={"ul"}
          data-plasmic-override={overrides.ul}
          hasGap={
            hasVariant(globalVariants, "screen", "smallDesktop") ||
            hasVariant(globalVariants, "screen", "mobile")
              ? true
              : false
          }
          className={classNames(defaultcss.ul, sty.ul)}
        >
          <li className={classNames(defaultcss.li, sty.li___1KZmm)}>
            <p.Stack
              as={"div"}
              hasGap={
                hasVariant(globalVariants, "screen", "mobile") ? true : false
              }
              className={classNames(defaultcss.all, sty.box__tUHzZ)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__c5Mdd
                )}
              >
                {"Мы - стоматологическая клиника"}
              </div>

              <p.Stack
                as={"a"}
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                hasGap={true}
                className={classNames(defaultcss.all, sty.link)}
                href={"#contacts"}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__lnzaU
                  )}
                >
                  {triggers.hover_root ? " в Троицке" : " в Троицке"}
                </div>

                <PlaceholdersvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(defaultcss.all, sty.svg)}
                  role={"img"}
                />
              </p.Stack>
            </p.Stack>
          </li>

          <li
            className={classNames(
              defaultcss.li,
              defaultcss.__wab_text,
              sty.li___1WgB
            )}
          >
            {"Современное уникальное оборудование"}
          </li>

          <li className={classNames(defaultcss.li, sty.li__uXr4K)}>
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__b5Wa
              )}
            >
              {"3 кабинета"}
            </div>
          </li>

          <li
            className={classNames(
              defaultcss.li,
              defaultcss.__wab_text,
              sty.li__bv6Gk
            )}
          >
            {"Работаем с 2004 года"}
          </li>

          <img
            alt={""}
            className={classNames(defaultcss.img, sty.img__rb2DM)}
            role={"img"}
            src={tooth4Greysvg2PJXvWkEr4Ml}
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "ul", "link", "svg"],
  ul: ["ul", "link", "svg"],
  link: ["link", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSection__ArgProps,
      internalVariantPropNames: PlasmicSection__VariantProps
    });

    return PlasmicSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSection";
  } else {
    func.displayName = `PlasmicSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSection = Object.assign(
  // Top-level PlasmicSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ul: makeNodeComponent("ul"),
    link: makeNodeComponent("link"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicSection
    internalVariantProps: PlasmicSection__VariantProps,
    internalArgProps: PlasmicSection__ArgProps
  }
);

export default PlasmicSection;
/* prettier-ignore-end */
