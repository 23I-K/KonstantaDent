// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rRiHBMbiCNZ6Mp9qsJpkyN
// Component: Y6P8eBMoeV
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ds0rkJllqclQf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_simple_light.module.css"; // plasmic-import: rRiHBMbiCNZ6Mp9qsJpkyN/projectcss
import * as sty from "./PlasmicCircleButton.module.css"; // plasmic-import: Y6P8eBMoeV/css

export const PlasmicCircleButton__VariantProps = new Array(
  "leftArrow",
  "rightArrow"
);

export const PlasmicCircleButton__ArgProps = new Array();

function PlasmicCircleButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    hasVariant(globalVariants, "screen", "smallDesktop") ? true : false
  ) ? (
    <button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.button,
        defaultcss.__wab_text,
        projectcss.root_reset,
        sty.root,
        {
          [sty.root__leftArrow]: hasVariant(variants, "leftArrow", "leftArrow"),
          [sty.root__rightArrow]: hasVariant(
            variants,
            "rightArrow",
            "rightArrow"
          ),

          [sty.root__rightArrow_leftArrow]:
            hasVariant(variants, "rightArrow", "rightArrow") &&
            hasVariant(variants, "leftArrow", "leftArrow")
        }
      )}
    >
      {hasVariant(variants, "rightArrow", "rightArrow") &&
      hasVariant(globalVariants, "screen", "smallDesktop")
        ? ""
        : hasVariant(variants, "leftArrow", "leftArrow")
        ? ""
        : hasVariant(globalVariants, "screen", "smallDesktop")
        ? "Click Me"
        : "Click Me"}
    </button>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCircleButton__ArgProps,
      internalVariantPropNames: PlasmicCircleButton__VariantProps
    });

    return PlasmicCircleButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCircleButton";
  } else {
    func.displayName = `PlasmicCircleButton.${nodeName}`;
  }
  return func;
}

export const PlasmicCircleButton = Object.assign(
  // Top-level PlasmicCircleButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCircleButton
    internalVariantProps: PlasmicCircleButton__VariantProps,
    internalArgProps: PlasmicCircleButton__ArgProps
  }
);

export default PlasmicCircleButton;
/* prettier-ignore-end */
