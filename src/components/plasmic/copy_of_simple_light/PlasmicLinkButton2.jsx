// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rRiHBMbiCNZ6Mp9qsJpkyN
// Component: gG3tjBQMub9
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_simple_light.module.css"; // plasmic-import: rRiHBMbiCNZ6Mp9qsJpkyN/projectcss
import * as sty from "./PlasmicLinkButton2.module.css"; // plasmic-import: gG3tjBQMub9/css
import PlayButtonsvgIcon from "./icons/PlasmicIcon__PlayButtonsvg"; // plasmic-import: YAQbtGQUV0Xee/icon

export const PlasmicLinkButton2__VariantProps = new Array("type");

export const PlasmicLinkButton2__ArgProps = new Array("text", "href");

function PlasmicLinkButton2__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"a"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__type_outlineBlue]: hasVariant(
          variants,
          "type",
          "outlineBlue"
        ),

        [sty.root__type_outlineRoundedWhite]: hasVariant(
          variants,
          "type",
          "outlineRoundedWhite"
        ),

        [sty.root__type_smallLinkStyle]: hasVariant(
          variants,
          "type",
          "smallLinkStyle"
        ),

        [sty.root__type_small]: hasVariant(variants, "type", "small"),
        [sty.root__type_solidBlack]: hasVariant(variants, "type", "solidBlack"),
        [sty.root__type_solidBlue]: hasVariant(variants, "type", "solidBlue")
      })}
      href={args.href !== undefined ? args.href : "#"}
    >
      <div
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        className={classNames(defaultcss.all, sty.box, {
          [sty.box__type_outlineRoundedWhite]: hasVariant(
            variants,
            "type",
            "outlineRoundedWhite"
          ),

          [sty.box__type_small]: hasVariant(variants, "type", "small")
        })}
      >
        <p.PlasmicSlot
          defaultContents={"Смотреть видео"}
          value={args.text}
          className={classNames(sty.slotText, {
            [sty.slotText__type_outlineBlue]: hasVariant(
              variants,
              "type",
              "outlineBlue"
            ),

            [sty.slotText__type_outlineRoundedWhite]: hasVariant(
              variants,
              "type",
              "outlineRoundedWhite"
            ),

            [sty.slotText__type_smallLinkStyle]: hasVariant(
              variants,
              "type",
              "smallLinkStyle"
            ),

            [sty.slotText__type_small]: hasVariant(variants, "type", "small"),
            [sty.slotText__type_solidBlack]: hasVariant(
              variants,
              "type",
              "solidBlack"
            ),

            [sty.slotText__type_solidBlue]: hasVariant(
              variants,
              "type",
              "solidBlue"
            )
          })}
        />
      </div>

      {(hasVariant(variants, "type", "outlineRoundedWhite") ? true : false) ? (
        <PlayButtonsvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg, {
            [sty.svg__type_outlineRoundedWhite]: hasVariant(
              variants,
              "type",
              "outlineRoundedWhite"
            )
          })}
          role={"img"}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "box", "svg"],
  box: ["box"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLinkButton2__ArgProps,
      internalVariantPropNames: PlasmicLinkButton2__VariantProps
    });

    return PlasmicLinkButton2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLinkButton2";
  } else {
    func.displayName = `PlasmicLinkButton2.${nodeName}`;
  }
  return func;
}

export const PlasmicLinkButton2 = Object.assign(
  // Top-level PlasmicLinkButton2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicLinkButton2
    internalVariantProps: PlasmicLinkButton2__VariantProps,
    internalArgProps: PlasmicLinkButton2__ArgProps
  }
);

export default PlasmicLinkButton2;
/* prettier-ignore-end */
