// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rRiHBMbiCNZ6Mp9qsJpkyN
// Component: w82YywdoVWCd
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import LinkButton from "../../LinkButton"; // plasmic-import: MxOTJDJLWhAH/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: ds0rkJllqclQf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_simple_light.module.css"; // plasmic-import: rRiHBMbiCNZ6Mp9qsJpkyN/projectcss
import * as sty from "./PlasmicMenuItems.module.css"; // plasmic-import: w82YywdoVWCd/css

export const PlasmicMenuItems__VariantProps = new Array();

export const PlasmicMenuItems__ArgProps = new Array();

function PlasmicMenuItems__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__wfDw0)}>
        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__pqxP7)}
          href={"/features"}
          text={"Главная"}
          type={"small"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__hs5S8)}
          href={"/pricing"}
          text={"Услуги и цены"}
          type={"small"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__zfQrs)}
          text={"Специалисты"}
          type={"small"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__skTNo)}
          text={
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__n5EAc
              )}
            >
              {"F.A.Q."}
            </div>
          }
          type={"small"}
        />

        <LinkButton
          className={classNames("__wab_instance", sty.linkButton__fBkn)}
          text={"Контакты"}
          type={"small"}
        />
      </div>

      <a
        data-plasmic-name={"link"}
        data-plasmic-override={overrides.link}
        className={classNames(defaultcss.all, defaultcss.__wab_text, sty.link)}
        href={"tel:+79771054555"}
      >
        {"+7(977) 105 45-55"}
      </a>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "link"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuItems__ArgProps,
      internalVariantPropNames: PlasmicMenuItems__VariantProps
    });

    return PlasmicMenuItems__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuItems";
  } else {
    func.displayName = `PlasmicMenuItems.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuItems = Object.assign(
  // Top-level PlasmicMenuItems renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicMenuItems
    internalVariantProps: PlasmicMenuItems__VariantProps,
    internalArgProps: PlasmicMenuItems__ArgProps
  }
);

export default PlasmicMenuItems;
/* prettier-ignore-end */
