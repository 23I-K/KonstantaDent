// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rRiHBMbiCNZ6Mp9qsJpkyN
// Component: lV8cBegov1BaA
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_simple_light.module.css"; // plasmic-import: rRiHBMbiCNZ6Mp9qsJpkyN/projectcss
import * as sty from "./PlasmicYandexMaps.module.css"; // plasmic-import: lV8cBegov1BaA/css
import imageGJGputBh from "./images/image.png"; // plasmic-import: gJ-GPUTBh/picture

export const PlasmicYandexMaps__VariantProps = new Array();

export const PlasmicYandexMaps__ArgProps = new Array();

function PlasmicYandexMaps__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <img
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(defaultcss.img, sty.img)}
        role={"img"}
        src={imageGJGputBh}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicYandexMaps__ArgProps,
      internalVariantPropNames: PlasmicYandexMaps__VariantProps
    });

    return PlasmicYandexMaps__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicYandexMaps";
  } else {
    func.displayName = `PlasmicYandexMaps.${nodeName}`;
  }
  return func;
}

export const PlasmicYandexMaps = Object.assign(
  // Top-level PlasmicYandexMaps renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicYandexMaps
    internalVariantProps: PlasmicYandexMaps__VariantProps,
    internalArgProps: PlasmicYandexMaps__ArgProps
  }
);

export default PlasmicYandexMaps;
/* prettier-ignore-end */
