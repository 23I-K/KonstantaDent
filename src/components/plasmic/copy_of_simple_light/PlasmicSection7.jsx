// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: rRiHBMbiCNZ6Mp9qsJpkyN
// Component: Jaa1OaTc0XCX3
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import LinkButton from "../../LinkButton"; // plasmic-import: MxOTJDJLWhAH/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_copy_of_simple_light.module.css"; // plasmic-import: rRiHBMbiCNZ6Mp9qsJpkyN/projectcss
import * as sty from "./PlasmicSection7.module.css"; // plasmic-import: Jaa1OaTc0XCX3/css
import imgZubpngFXjU35TGbcetp from "./images/imgZubpng.png"; // plasmic-import: FXjU35tGBCETP/picture

export const PlasmicSection7__VariantProps = new Array();

export const PlasmicSection7__ArgProps = new Array();

function PlasmicSection7__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box__jwoag)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__tFsll
          )}
        >
          {"Запишитесь на приём онлайн!"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__va9Oq
          )}
        >
          {"И получите бесплатную консультацию от наших специалистов!"}
        </div>

        <div className={classNames(defaultcss.all, sty.box__pbcI)}>
          <img
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(defaultcss.img, sty.img)}
            role={"img"}
            src={imgZubpngFXjU35TGbcetp}
          />

          <div className={classNames(defaultcss.all, sty.box__lNvs)}>
            <div className={classNames(defaultcss.all, sty.box__gxSlU)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__nofZu
                )}
              >
                {"Выбор услуги"}
              </div>

              <div className={classNames(defaultcss.all, sty.box__rM5Xi)}>
                <LinkButton
                  className={classNames(
                    "__wab_instance",
                    sty.linkButton__b7VGc
                  )}
                  text={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__bVcLb
                      )}
                    >
                      {"Вернуться"}
                    </div>
                  }
                />

                <LinkButton
                  className={classNames(
                    "__wab_instance",
                    sty.linkButton___5IhKx
                  )}
                  text={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__mr344
                      )}
                    >
                      {"Пропустить"}
                    </div>
                  }
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSection7__ArgProps,
      internalVariantPropNames: PlasmicSection7__VariantProps
    });

    return PlasmicSection7__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSection7";
  } else {
    func.displayName = `PlasmicSection7.${nodeName}`;
  }
  return func;
}

export const PlasmicSection7 = Object.assign(
  // Top-level PlasmicSection7 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicSection7
    internalVariantProps: PlasmicSection7__VariantProps,
    internalArgProps: PlasmicSection7__ArgProps
  }
);

export default PlasmicSection7;
/* prettier-ignore-end */
